name: Production release

on:
  push:
    tags:
      - "*"

jobs:

  release:

    name: Release application
    runs-on: "ubuntu-latest"

    steps:

    - uses: actions/checkout@v2

    - name: Extract latest software release
      id: get-latest-stable-release
      uses: thebritican/fetch-latest-release@v2.0.0
      with:
        github_token: ${{ github.token }}

    - name: Generate changelog
      uses: release-drafter/release-drafter@v5
      id: changelog
      with:
        disable-autolabeler: true
        prerelease: false
        tag: ${{ github.ref_name }}
        version: ${{ github.ref_name }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Create Release
      uses: actions/create-release@v1
      with:
        tag_name: ${{ github.ref_name }}
        release_name: ${{ github.ref_name }}
        body: ${{ steps.changelog.outputs.body }}
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ secrets.AWS_REGION }}

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1

    - uses: actions/checkout@v2

    - name: Build, tag, and push image to Amazon ECR
      env:
        ECR_REGISTRY: ${{ secrets.ECR_REGISTRY }}
        ECR_REPOSITORY: ${{ secrets.ECR_REPOSITORY }}
        IMAGE_TAG: ${{ github.ref_name }}
      run: |
        docker build -f docker/Dockerfile -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG --no-cache --force-rm .
        docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

  infrastucture-deployment:

    name: Production infrastructure deployment
    runs-on: ubuntu-latest
    needs: release
    strategy:
      matrix:
        environment: [dev, test, prod]

    steps:

    - uses: actions/checkout@v2

    - name: "Setup AWS Credentials"
      run: |
          mkdir -p ~/.aws
          echo "[default]" > ~/.aws/credentials
          echo "aws_access_key_id = ${{ secrets.AWS_ACCESS_KEY_ID }}" >> ~/.aws/credentials
          echo "aws_secret_access_key = ${{ secrets.AWS_SECRET_ACCESS_KEY }}" >> ~/.aws/credentials

    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v1
      with:
        terraform_version: 1.1.8

    - name: Glue tables | Init
      id: glue-table-init
      env:
        TF_WORKSPACE: ${{ matrix.environment }}
      run: cd terraform/glue/tables && make init

    - name: Glue tables | Validate
      id: glue-table-validate
      run: cd terraform/glue/tables && terraform validate -no-color

    - name: Glue tables | Plan
      id: glue-table-plan
      env:
        TF_WORKSPACE: ${{ matrix.environment }}
      run: cd terraform/glue/tables && make plan
      continue-on-error: false

    - name: Glue tables | Status Check
      id: glue-table-status-check
      if: steps.glue-table-plan.outcome == 'failure'
      run: exit 1

    - name: Glue tables | Apply
      id: glue-table-apply
      env:
        TF_WORKSPACE: ${{ matrix.environment }}
      run: cd terraform/glue/tables && make apply

    - name: Lambda | Init
      id: lambda-init
      env:
        TF_WORKSPACE: ${{ matrix.environment }}
      run: cd terraform/lambda && make init

    - name: Lambda | Validate
      id: lambda-validate
      run: cd terraform/lambda && terraform validate -no-color

    - name: Lambda | Plan
      id: lambda-plan
      env:
        TF_WORKSPACE: ${{ matrix.environment }}
        TF_VAR_build_tag: ${{ github.ref_name }}
      run: cd terraform/lambda && make plan
      continue-on-error: false

    - name: Lambda | Status Check
      id: lambda-status-check
      if: steps.lambda-plan.outcome == 'failure'
      run: exit 1

    - name: Lambda | Apply
      id: lambda-apply
      env:
        TF_WORKSPACE: ${{ matrix.environment }}
        TF_VAR_build_tag: ${{ github.ref_name }}
      run: cd terraform/lambda && make apply
